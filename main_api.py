from fastapi import FastAPI, APIRouter, HTTPException
from pydantic import BaseModel
from agent import Agent, AgentConfig  # Import the Agent logic
import models

# Models for API requests and responses
class ExecuteRequest(BaseModel):
    task: str

class ExecuteResponse(BaseModel):
    status: str
    data: dict

# Create FastAPI app
app = FastAPI()

# Create API router
router = APIRouter()

@router.post("/execute", response_model=ExecuteResponse)
async def execute_task(request: ExecuteRequest):
    try:
        # Initialize models as in main.py
        chat_llm = models.get_openai_chat(model_name="gpt-4o-mini", temperature=0)
        utility_llm = chat_llm
        embedding_llm = models.get_openai_embedding(model_name="text-embedding-3-small")

        # Configure the Agent as in main.py
        config = AgentConfig(
            chat_model=chat_llm,
            utility_model=utility_llm,
            embeddings_model=embedding_llm,
            auto_memory_count=0,
            rate_limit_requests=10,
            rate_limit_input_tokens=0,
            rate_limit_output_tokens=0,
            rate_limit_seconds=60,
            # memory_subdir = "",
            # auto_memory_skip = 2,
            # rate_limit_seconds = 60,
            # rate_limit_requests = 30,
            # rate_limit_input_tokens = 0,
            # rate_limit_output_tokens = 0,
            # msgs_keep_max = 25,
            # msgs_keep_start = 5,
            # msgs_keep_end = 10,
            max_tool_response_length = 3000,
            # response_timeout_seconds = 60,
            code_exec_docker_enabled = True,
            # code_exec_docker_name = "agent-zero-exe",
            # code_exec_docker_image = "frdel/agent-zero-exe:latest",
            # code_exec_docker_ports = { "22/tcp": 50022 }
            # code_exec_docker_volumes = { files.get_abs_path("work_dir"): {"bind": "/root", "mode": "rw"} }
            code_exec_ssh_enabled = True,
            # code_exec_ssh_addr = "localhost",
            # code_exec_ssh_port = 50022,
            # code_exec_ssh_user = "root",
            # code_exec_ssh_pass = "toor",
            # additional = {},
        )

        # Initialize the Agent
        agent = Agent(number=1, config=config)

        # Use the message_loop to execute the task
        result = agent.message_loop(request.task)

        # Return the response generated by the Agent
        return ExecuteResponse(status="success", data={"response": result})

    except Exception as e:
        # Handle exceptions and return a 500 error
        raise HTTPException(status_code=500, detail=str(e))

# Add the API router to the FastAPI app
app.include_router(router, prefix="/api")

# Run the FastAPI app
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
